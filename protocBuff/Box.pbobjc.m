// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: box.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Box.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - BoxRoot

@implementation BoxRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - BoxRoot_FileDescriptor

static GPBFileDescriptor *BoxRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Box

@implementation Box

@dynamic dataAckOneOfCase;
@dynamic dataRequestOneOfCase;
@dynamic code;
@dynamic msg;
@dynamic service;
@dynamic sendMessageRequest;
@dynamic getPictureRequest;
@dynamic sendMessageAck;
@dynamic getPictureAck;

typedef struct Box__storage_ {
  uint32_t _has_storage_[3];
  Box_Code code;
  Box_Service service;
  NSString *msg;
  SendMessageRequest *sendMessageRequest;
  GetPictureRequest *getPictureRequest;
  SendMessageAck *sendMessageAck;
  GetPictureAck *getPictureAck;
} Box__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.enumDescFunc = Box_Code_EnumDescriptor,
        .number = Box_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Box__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msg",
        .dataTypeSpecific.className = NULL,
        .number = Box_FieldNumber_Msg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Box__storage_, msg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "service",
        .dataTypeSpecific.enumDescFunc = Box_Service_EnumDescriptor,
        .number = Box_FieldNumber_Service,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Box__storage_, service),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sendMessageRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(SendMessageRequest),
        .number = Box_FieldNumber_SendMessageRequest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Box__storage_, sendMessageRequest),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getPictureRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(GetPictureRequest),
        .number = Box_FieldNumber_GetPictureRequest,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Box__storage_, getPictureRequest),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendMessageAck",
        .dataTypeSpecific.className = GPBStringifySymbol(SendMessageAck),
        .number = Box_FieldNumber_SendMessageAck,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(Box__storage_, sendMessageAck),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getPictureAck",
        .dataTypeSpecific.className = GPBStringifySymbol(GetPictureAck),
        .number = Box_FieldNumber_GetPictureAck,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(Box__storage_, getPictureAck),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Box class]
                                     rootClass:[BoxRoot class]
                                          file:BoxRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Box__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "dataAck",
      "dataRequest",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\013\022\000\014\021\0003\016\0004\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Box_Code_RawValue(Box *message) {
  GPBDescriptor *descriptor = [Box descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Box_FieldNumber_Code];
  return GPBGetMessageInt32Field(message, field);
}

void SetBox_Code_RawValue(Box *message, int32_t value) {
  GPBDescriptor *descriptor = [Box descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Box_FieldNumber_Code];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t Box_Service_RawValue(Box *message) {
  GPBDescriptor *descriptor = [Box descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Box_FieldNumber_Service];
  return GPBGetMessageInt32Field(message, field);
}

void SetBox_Service_RawValue(Box *message, int32_t value) {
  GPBDescriptor *descriptor = [Box descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Box_FieldNumber_Service];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void Box_ClearDataAckOneOfCase(Box *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
void Box_ClearDataRequestOneOfCase(Box *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:1];
  GPBMaybeClearOneof(message, oneof, -2, 0);
}
#pragma mark - Enum Box_Service

GPBEnumDescriptor *Box_Service_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "HeartBeat\000SendMesaage\000SendMesaageRespons"
        "e\000GetPicture\000GetPictureResponse\000";
    static const int32_t values[] = {
        Box_Service_HeartBeat,
        Box_Service_SendMesaage,
        Box_Service_SendMesaageResponse,
        Box_Service_GetPicture,
        Box_Service_GetPictureResponse,
    };
    static const char *extraTextFormatInfo = "\005\000)\000\001+\000\0023\000\003*\000\0042\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Box_Service)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Box_Service_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Box_Service_IsValidValue(int32_t value__) {
  switch (value__) {
    case Box_Service_HeartBeat:
    case Box_Service_SendMesaage:
    case Box_Service_SendMesaageResponse:
    case Box_Service_GetPicture:
    case Box_Service_GetPictureResponse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Box_Code

GPBEnumDescriptor *Box_Code_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Sucess\000AuthError\000";
    static const int32_t values[] = {
        Box_Code_Sucess,
        Box_Code_AuthError,
    };
    static const char *extraTextFormatInfo = "\002\000&\000\001)\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Box_Code)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Box_Code_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Box_Code_IsValidValue(int32_t value__) {
  switch (value__) {
    case Box_Code_Sucess:
    case Box_Code_AuthError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SendMessageRequest

@implementation SendMessageRequest

@dynamic message;

typedef struct SendMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *message;
} SendMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageRequest_FieldNumber_Message,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessageRequest__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessageRequest class]
                                     rootClass:[BoxRoot class]
                                          file:BoxRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendMessageAck

@implementation SendMessageAck

@dynamic ackMessage;

typedef struct SendMessageAck__storage_ {
  uint32_t _has_storage_[1];
  NSString *ackMessage;
} SendMessageAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ackMessage",
        .dataTypeSpecific.className = NULL,
        .number = SendMessageAck_FieldNumber_AckMessage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessageAck__storage_, ackMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessageAck class]
                                     rootClass:[BoxRoot class]
                                          file:BoxRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessageAck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPictureRequest

@implementation GetPictureRequest

@dynamic URL;

typedef struct GetPictureRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
} GetPictureRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = GetPictureRequest_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPictureRequest__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPictureRequest class]
                                     rootClass:[BoxRoot class]
                                          file:BoxRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPictureRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPictureAck

@implementation GetPictureAck

@dynamic pictureData;

typedef struct GetPictureAck__storage_ {
  uint32_t _has_storage_[1];
  NSData *pictureData;
} GetPictureAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pictureData",
        .dataTypeSpecific.className = NULL,
        .number = GetPictureAck_FieldNumber_PictureData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetPictureAck__storage_, pictureData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPictureAck class]
                                     rootClass:[BoxRoot class]
                                          file:BoxRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetPictureAck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
